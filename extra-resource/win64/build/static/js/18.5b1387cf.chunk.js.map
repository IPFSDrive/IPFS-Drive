{"version":3,"sources":["../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","actions/configActions.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["propTypes","tag","tagPropType","inverse","PropTypes","bool","color","string","body","outline","className","cssModule","object","innerRef","oneOfType","func","Card","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","CardBody","getProviders","dispatch","getAllProviders","then","data","type","GET_PROVIDERS","payload","providers","getConfigDump","getAllConfigDump","res","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","NewDriveAuthModal","toggle","bind","this","closeModal","isVisible","isOpen","data-test","onClick","Component","children","node","valid","tooltip","undefined","FormFeedback","validMode","_transitionStatusToCl","ownKeys","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","Transition","arrayOf","navbar","appear","enter","exit","timeout","TransitionTimeouts","Collapse","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","_this","call","state","height","name","_assertThisInitialized","_inheritsLoose","_proto","prototype","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","otherProps","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","in","collapseClass","getTransitionClass","style","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","lang","Description","slice","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onChange","currentConfig","findFromConfig","inputProps","placeholder","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","idx","Hide","Advanced","labelValue","Help","requiredValue","Required","hasExamples","isEmpty","Examples","examplesMap","inputType","IsPassword","Type","FormGroup","row","Label","for","Name","sm","Col","Input","invalid","id","required","CustomInput","label","isValid","NewDrive","context","e","handleInputChange","inputName","optionTypes","formValues","validateResult","validateSizeSuffix","validateDuration","validateInt","prevState","formErrors","changeDriveType","event","newValue","val","availableOptions","item","DefaultStr","openSetupDrive","preventDefault","editAdvancedOptions","advancedOptions","clearForm","_","driveName","changeName","driveNameIsEditable","validateDriveName","driveNameIsValid","axiosInstance","post","urls","getConfigForRemote","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","scrollIntoView","behavior","gotoNextStep","currentStepNumber","handleSubmit","setCurrentStep","gotoPrevStep","stepNo","StepShowCase","stepTitles","Container","Row","Fragment","md","colRconfig","colSetup","formValuesValid","authModalIsVisible","configCheckInterval","toggleAuthModal","startAuthentication","checkConfigStatus","a","clearInterval","history","toast","autoClose","flag","entries","setInterval","NEW_DRIVE_CONFIG_REFRESH_TIMEOUT","console","validateForm","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","match","params","createConfig","info","updateConfig","stopAuthentication","warn","log","Button","ErrorBoundary","href","isEdit","connect"],"mappings":"iJAAA,4EAMIA,EAAY,CACdC,IAAKC,IACLC,QAASC,IAAUC,KACnBC,MAAOF,IAAUG,OACjBC,KAAMJ,IAAUC,KAChBI,QAASL,IAAUC,KACnBK,UAAWN,IAAUG,OACrBI,UAAWP,IAAUQ,OACrBC,SAAUT,IAAUU,UAAU,CAACV,IAAUQ,OAAQR,IAAUG,OAAQH,IAAUW,QAM3EC,EAAO,SAAcC,GACvB,IAAIP,EAAYO,EAAMP,UAClBC,EAAYM,EAAMN,UAClBL,EAAQW,EAAMX,MACdE,EAAOS,EAAMT,KACbL,EAAUc,EAAMd,QAChBM,EAAUQ,EAAMR,QAChBS,EAAMD,EAAMhB,IACZY,EAAWI,EAAMJ,SACjBM,EAAaC,YAA8BH,EAAO,CAAC,YAAa,YAAa,QAAS,OAAQ,UAAW,UAAW,MAAO,aAE3HI,EAAUC,YAAgBC,IAAWb,EAAW,SAAQP,GAAU,eAAsBK,GAAO,cAAqBF,IAASG,EAAU,SAAW,MAAQ,IAAMH,GAAgBK,GACpL,OAAoBa,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpET,UAAWW,EACXM,IAAKd,MAITG,EAAKhB,UAAYA,EACjBgB,EAAKY,aAvBc,CACjB3B,IAAK,OAuBQe,O,iCCxCf,4EAMIhB,EAAY,CACdC,IAAKC,IACLQ,UAAWN,IAAUG,OACrBI,UAAWP,IAAUQ,OACrBC,SAAUT,IAAUU,UAAU,CAACV,IAAUQ,OAAQR,IAAUG,OAAQH,IAAUW,QAM3Ec,EAAW,SAAkBZ,GAC/B,IAAIP,EAAYO,EAAMP,UAClBC,EAAYM,EAAMN,UAClBE,EAAWI,EAAMJ,SACjBK,EAAMD,EAAMhB,IACZkB,EAAaC,YAA8BH,EAAO,CAAC,YAAa,YAAa,WAAY,QAEzFI,EAAUC,YAAgBC,IAAWb,EAAW,aAAcC,GAClE,OAAoBa,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpET,UAAWW,EACXM,IAAKd,MAITgB,EAAS7B,UAAYA,EACrB6B,EAASD,aAnBU,CACjB3B,IAAK,OAmBQ4B,O,iCChCf,wFAOaC,EAAe,kBAAM,SAAAC,GAC9BC,4BAAkBC,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACpCI,KAAMC,IACNC,QAASH,EAAKI,iBAOTC,EAAgB,kBAAM,SAAAR,GAC/BS,6BAAmBP,MAAK,SAAAQ,GAAG,OAAIV,EAAS,CACpCI,KAAMO,IACNC,OAAQC,IACRP,QAASI,OACT,SAAAI,GAAK,OAAId,EAAS,CAClBI,KAAMO,IACNC,OAAQG,IACRT,QAASQ,U,oJCnBXE,E,kDAEF,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IAED+B,OAAS,EAAKA,OAAOC,KAAZ,gBAHC,E,0CAMnB,WACIC,KAAKjC,MAAMkC,e,oBAIf,WACI,IAAOC,EAAaF,KAAKjC,MAAlBmC,UACP,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAQD,EAAWJ,OAAQE,KAAKF,QACnC,kBAAC,IAAD,CAAaA,OAAQE,KAAKF,OAAQM,YAAU,eAA5C,2BACA,kBAAC,IAAD,CAAWA,YAAU,aAArB,mIAKA,kBAAC,IAAD,CAAaA,YAAU,eACnB,kBAAC,IAAD,CAAQhD,MAAM,UAAUiD,QAASL,KAAKF,QAAtC,QAA4D,Y,GA1BxDxB,IAAMgC,WAwCtCT,EAAkBnB,aAAe,CAC7BwB,WAAW,GAIAL,O,iCCnDf,4EAMI/C,EAAY,CACdyD,SAAUrD,IAAUsD,KACpBzD,IAAKC,IACLQ,UAAWN,IAAUG,OACrBI,UAAWP,IAAUQ,OACrB+C,MAAOvD,IAAUC,KACjBuD,QAASxD,IAAUC,MAEjBuB,EAAe,CACjB3B,IAAK,MACL0D,WAAOE,GAGLC,EAAe,SAAsB7C,GACvC,IAAIP,EAAYO,EAAMP,UAClBC,EAAYM,EAAMN,UAClBgD,EAAQ1C,EAAM0C,MACdC,EAAU3C,EAAM2C,QAChB1C,EAAMD,EAAMhB,IACZkB,EAAaC,YAA8BH,EAAO,CAAC,YAAa,YAAa,QAAS,UAAW,QAEjG8C,EAAYH,EAAU,UAAY,WAClCvC,EAAUC,YAAgBC,IAAWb,EAAWiD,EAAQ,SAAWI,EAAY,WAAaA,GAAYpD,GAC5G,OAAoBa,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpET,UAAWW,MAIfyC,EAAa9D,UAAYA,EACzB8D,EAAalC,aAAeA,EACbkC,O,iCCpCf,IAMIE,EANJ,2GAQA,SAASC,EAAQrD,EAAQsD,GAAkB,IAAIC,EAAOC,OAAOD,KAAKvD,GAAS,GAAIwD,OAAOC,sBAAuB,CAAE,IAAIC,EAAUF,OAAOC,sBAAsBzD,GAAasD,IAAgBI,EAAUA,EAAQC,QAAO,SAAUC,GAAO,OAAOJ,OAAOK,yBAAyB7D,EAAQ4D,GAAKE,eAAgBP,EAAKQ,KAAKC,MAAMT,EAAMG,GAAY,OAAOH,EAE9U,SAASU,EAAcC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAAQA,EAAI,EAAKd,EAAQG,OAAOc,IAAS,GAAMC,SAAQ,SAAUC,GAAOC,YAAgBP,EAAQM,EAAKF,EAAOE,OAAsBhB,OAAOkB,0BAA6BlB,OAAOmB,iBAAiBT,EAAQV,OAAOkB,0BAA0BJ,IAAmBjB,EAAQG,OAAOc,IAASC,SAAQ,SAAUC,GAAOhB,OAAOoB,eAAeV,EAAQM,EAAKhB,OAAOK,yBAAyBS,EAAQE,OAAe,OAAON,EAQ7gB,IAAI9E,EAAY6E,EAAcA,EAAc,GAAIY,aAAWzF,WAAY,GAAI,CACzEqD,OAAQjD,IAAUC,KAClBoD,SAAUrD,IAAUU,UAAU,CAACV,IAAUsF,QAAQtF,IAAUsD,MAAOtD,IAAUsD,OAC5EzD,IAAKC,IACLQ,UAAWN,IAAUsD,KACrBiC,OAAQvF,IAAUC,KAClBM,UAAWP,IAAUQ,OACrBC,SAAUT,IAAUU,UAAU,CAACV,IAAUW,KAAMX,IAAUG,OAAQH,IAAUQ,WAGzEgB,EAAeiD,EAAcA,EAAc,GAAIY,aAAW7D,cAAe,GAAI,CAC/EyB,QAAQ,EACRuC,QAAQ,EACRC,OAAO,EACPC,MAAM,EACN7F,IAAK,MACL8F,QAASC,IAAmBC,WAG1BC,IAA+BlC,EAAwB,IAA0BmC,IAAmBC,UAAY,aAAcpC,EAAsBmC,IAAmBE,SAAW,gBAAiBrC,EAAsBmC,IAAmBG,SAAW,aAActC,EAAsBmC,IAAmBI,QAAU,WAAYvC,GAMxU,SAASwC,EAAU9C,GACjB,OAAOA,EAAK+C,aAGd,IAAIR,EAAwB,SAAUS,GAGpC,SAAST,EAAShF,GAChB,IAAI0F,EASJ,OAPAA,EAAQD,EAAWE,KAAK1D,KAAMjC,IAAUiC,MAClC2D,MAAQ,CACZC,OAAQ,MAEV,CAAC,aAAc,YAAa,SAAU,YAAa,YAAY3B,SAAQ,SAAU4B,GAC/EJ,EAAMI,GAAQJ,EAAMI,GAAM9D,KAAK+D,YAAuBL,OAEjDA,EAZTM,YAAehB,EAAUS,GAezB,IAAIQ,EAASjB,EAASkB,UA6EtB,OA3EAD,EAAOE,WAAa,SAAoB1D,EAAM2D,GAC5CnE,KAAKoE,SAAS,CACZR,OAAQN,EAAU9C,KAEpBR,KAAKjC,MAAMmG,WAAW1D,EAAM2D,IAG9BH,EAAOK,UAAY,SAAmB7D,EAAM2D,GAC1CnE,KAAKoE,SAAS,CACZR,OAAQ,OAEV5D,KAAKjC,MAAMsG,UAAU7D,EAAM2D,IAG7BH,EAAOM,OAAS,SAAgB9D,GAC9BR,KAAKoE,SAAS,CACZR,OAAQN,EAAU9C,KAEpBR,KAAKjC,MAAMuG,OAAO9D,IAGpBwD,EAAOO,UAAY,SAAmB/D,GAEtBA,EAAKgE,aAEnBxE,KAAKoE,SAAS,CACZR,OAAQ,IAEV5D,KAAKjC,MAAMwG,UAAU/D,IAGvBwD,EAAOS,SAAW,SAAkBjE,GAClCR,KAAKoE,SAAS,CACZR,OAAQ,OAEV5D,KAAKjC,MAAM0G,SAASjE,IAGtBwD,EAAOU,OAAS,WACd,IAAIC,EAAS3E,KAET4E,EAAc5E,KAAKjC,MACnBC,EAAM4G,EAAY7H,IAClBoD,EAASyE,EAAYzE,OACrB3C,EAAYoH,EAAYpH,UACxBiF,EAASmC,EAAYnC,OACrBhF,EAAYmH,EAAYnH,UACxB8C,EAAWqE,EAAYrE,SAEvBsE,GADWD,EAAYjH,SACVO,YAA8B0G,EAAa,CAAC,MAAO,SAAU,YAAa,SAAU,YAAa,WAAY,cAE1HhB,EAAS5D,KAAK2D,MAAMC,OACpBkB,EAAkBC,YAAKF,EAAYG,KACnCC,EAAaC,YAAKL,EAAYG,KAClC,OAAoB1G,IAAMC,cAAcgE,aAAY/D,YAAS,GAAIsG,EAAiB,CAChFK,GAAIhF,EACJ+D,WAAYlE,KAAKkE,WACjBG,UAAWrE,KAAKqE,UAChBC,OAAQtE,KAAKsE,OACbC,UAAWvE,KAAKuE,UAChBE,SAAUzE,KAAKyE,YACb,SAAUhF,GACZ,IAAI2F,EAxFV,SAA4B3F,GAC1B,OAAOuD,EAA4BvD,IAAW,WAuFtB4F,CAAmB5F,GACnCtB,EAAUC,YAAgBC,IAAWb,EAAW4H,EAAe3C,GAAU,mBAAoBhF,GAC7F6H,EAAmB,OAAX1B,EAAkB,KAAO,CACnCA,OAAQA,GAEV,OAAoBtF,IAAMC,cAAcP,EAAKQ,YAAS,GAAIyG,EAAY,CACpEK,MAAO3D,EAAcA,EAAc,GAAIsD,EAAWK,OAAQA,GAC1D9H,UAAWW,EACXM,IAAKkG,EAAO5G,MAAMJ,WAChB4C,OAIDwC,EA7FmB,CA8F1BzC,aAEFyC,EAASjG,UAAYA,EACrBiG,EAASrE,aAAeA,EACTqE,O,kSC5ITwC,EAAiB,SAACC,EAAQC,GAC5B,IAAMC,EAAaD,EAAME,OAAOC,cAC1BC,EAAcH,EAAW3D,OAE/B,OAAoB,IAAhB8D,EACOL,EAIY,IAAhBK,EAAoB,GAAKL,EAAOnE,QAAO,SAAAyE,GAAI,OAC9CA,EAAKC,YAAYH,cAAcI,MAAM,EAAGH,KAAiBH,MAO3DO,EAAqB,SAAAC,GAAU,OAAIA,EAAWC,QAG9CC,EAAmB,SAAAF,GAAU,OAC/B,6BACKA,EAAWH,cAqELM,E,kDAhEX,WAAYtI,GAAQ,IAAD,8BACf,cAAMA,IAeVuI,4BAA8B,YAAc,IAAZb,EAAW,EAAXA,MAE5B,EAAKrB,SAAS,CACVmC,YAAahB,EAAe,EAAKxH,MAAMwI,YAAad,MAnBzC,EAwBnBe,4BAA8B,WAC1B,EAAKpC,SAAS,CACVmC,YAAa,MAlBjB,EAAK5C,MAAQ,CACT4C,YAAa,IATF,E,0CA+BnB,WACI,MAAuCvG,KAAKjC,MAArC0H,EAAP,EAAOA,MAAOgB,EAAd,EAAcA,SAAUF,EAAxB,EAAwBA,YAClBG,EAAgBC,YAAeJ,EAAad,GAS5CmB,EAAa,CACfC,YAAa,uBACbpB,WATkB9E,IAAlB+F,EACYjB,EAEAiB,EAAcX,YAO1BU,SAAUA,GAId,OACI,kBAAC,IAAD,CACIF,YAAavG,KAAK2D,MAAM4C,YACxBD,4BAA6BtG,KAAKsG,4BAClCE,4BAA6BxG,KAAKwG,4BAClCP,mBAAoBA,EACpBG,iBAAkBA,EAClBU,yBAAyB,EACzBC,0BAA0B,EAC1BH,WAAYA,Q,GA3DMtI,IAAMgC,W,mDCIxC,SAAS0G,EAAT,GAAoH,IAA1FC,EAAyF,EAAzFA,YAAaC,EAA4E,EAA5EA,aAAcC,EAA8D,EAA9DA,cAAeC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,UAAW9B,EAAS,EAATA,OACxG,QAAoB7E,IAAhBsG,GAA6C,KAAhBA,EAAoB,CACnD,IAAMM,EAAkBZ,YAAenB,EAAQyB,GAC3CO,EAAY,GAChB,QAAwB7G,IAApB4G,EAyBFC,EAxBkBD,EAAgBE,QAwBZC,KAAI,SAACC,EAAMC,GAC/B,GAAkB,IAAdD,EAAKE,OAAgBX,GAAgBS,EAAKG,WAAeZ,IAAiBS,EAAKG,UAAY,CAC7F,IAAMC,EAAU,UAAMJ,EAAKK,MACrBC,EAAkBN,EAAKO,SAAa,uBAAG1K,UAAW,YAAd,KAAmC,KAEvE2K,GAAeC,YAAQT,EAAKU,UAC9BC,EAAc,KAEdC,EAAY,GA2BhB,OAxBIZ,EAAKa,WACPD,EAAY,WACHJ,EACTI,EAAY,SAIW,SAAdZ,EAAKc,MACdF,EAAY,SACZD,EAAc,CACX,4BAAQpG,IAAK,EAAGuD,OAAO,GAAvB,OACA,4BAAQvD,IAAK,EAAGuD,OAAO,GAAvB,QAKD8C,EADgB,QAAdZ,EAAKc,KACK,UACHd,EAAKc,KACF,QAOZ,kBAACC,EAAA,EAAD,CAAWxG,IAAK0F,EAAKe,KAAG,GACtB,kBAACC,EAAA,EAAD,CAAOC,IAAKlB,EAAKmB,KAAMC,GAAI,GAAIhB,EAAYE,GAC3C,kBAACe,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,CAAOhK,KAAMsJ,EAAW9C,MAAO2B,EAAcO,EAAKmB,MAC3CjF,KAAM8D,EAAKmB,KAAMrI,MAAO4G,EAAWM,EAAKmB,MAAOI,SAAU7B,EAAWM,EAAKmB,MACzEK,GAAIxB,EAAKmB,KAAMrC,SAAUU,EAAeiC,SAAUzB,EAAKO,UAC3DI,GAEH,kBAAC1H,EAAA,EAAD,KAAe0G,EAAUK,EAAKmB,SAMtC,OAAO,QAIb,OAAOtB,EAET,OACI,gEA2BN,SAAS6B,EAAT,GAAwG,IAAlFnH,EAAiF,EAAjFA,IAAKiH,EAA4E,EAA5EA,GAAIG,EAAwE,EAAxEA,MAAOnC,EAAiE,EAAjEA,cAAelI,EAAkD,EAAlDA,KAAMwG,EAA4C,EAA5CA,MAAO5B,EAAqC,EAArCA,KAAMgD,EAA+B,EAA/BA,YAA+B,IAAlB0C,eAAkB,SACrG,OACI,kBAACb,EAAA,EAAD,CAAWxG,IAAKA,EAAKyG,KAAG,GACtB,kBAACC,EAAA,EAAD,CAAOC,IAAKM,EAAIJ,GAAI,GAAIO,GACxB,kBAACN,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,CAAOhK,KAAMA,EAAMwG,MAAOA,EAAO5B,KAAMA,EAAMgD,YAAaA,EACnDsC,GAAIA,EAAI1C,SAAUU,EAAe1G,MAAO8I,EAASL,SAAUK,EAASH,UAAQ,IACnF,kBAACxI,EAAA,EAAD,CAAcH,OAAK,GAAnB,iCACA,kBAACG,EAAA,EAAD,sD,IAQJ4I,E,kDAEJ,WAAYzL,EAAO0L,GAAU,IAAD,8BAC1B,cAAM1L,EAAO0L,IAoCf3J,OAAS,SAAC4J,GACR,IAAI7F,EAAO6F,EAAE9H,OAAOiC,KAEpB,EAAKO,SAAL,eAAgBP,GAAQ,EAAKF,MAAME,MAxCT,EAuE5B8F,kBAAoB,SAACD,GAEnB,IAAIE,EAAYF,EAAE9H,OAAOiC,KACrB6B,EAAagE,EAAE9H,OAAO6D,MACpB8C,EAAY,EAAK5E,MAAMkG,YAAYD,GACzC,EAAKxF,SAAS,CACZ0F,WAAW,2BACN,EAAKnG,MAAMmG,YADN,kBAEPF,EAAYlE,MAGjB,IAAIqE,GAAiB,EACjBpK,EAAQ,GACM,eAAd4I,GACFwB,EAAiBC,YAAmBtE,MAElC/F,EAAQ,8EAEa,aAAd4I,GACTwB,EAAiBE,YAAiBvE,MAEhC/F,EAAQ,yEAEa,QAAd4I,KACTwB,EAAiBG,YAAYxE,MAE3B/F,EAAQ,8CAIR,EAAKgE,MAAMyF,SAASQ,IAAgBlE,GAA6B,KAAfA,IACpDqE,GAAiB,KAEfpK,GAAS,2BAKb,EAAKyE,UAAS,SAAC+F,GACb,MAAO,CACLZ,QAAQ,2BACHY,EAAUZ,SADR,kBAEJK,EAAYG,IAEfK,WAAW,2BACND,EAAUC,YADL,kBAEPR,EAAYjK,SArHO,EAkI5B0K,gBAAkB,SAACC,EAAD,GAAwB,IAAfC,EAAc,EAAdA,SAElBnL,EAAa,EAAKrB,MAAlBqB,UAEHoL,EAAMD,EAGNE,EAAmB,GACnBZ,EAAc,GACdN,EAAU,GACVa,EAAa,GACbhB,EAAW,GAGf,QAAYzI,IAAR6J,GAA6B,KAARA,EAAY,CAEnC,IAAM9D,EAAgBC,YAAevH,EAAWoL,QAC1B7J,IAAlB+F,GAEFA,EAAce,QAAQxF,SAAQ,SAAAyI,GAE5B,IAAOC,EAA0CD,EAA1CC,WAAYlC,EAA8BiC,EAA9BjC,KAAMK,EAAwB4B,EAAxB5B,KAAMZ,EAAkBwC,EAAlBxC,SAClB,IADoCwC,EAAR7C,OAEvC4C,EAAiB3B,GAAQ6B,EACzBd,EAAYf,GAAQL,EACpBW,EAASN,GAAQZ,EAEjBqB,EAAQT,KAAUZ,KAAcyC,GAA6B,KAAfA,IAE9CP,EAAWtB,GAAQ,OAIzB,EAAK1E,SAAS,CACZ6C,YAAauD,EACbV,WAAYW,EACZZ,YAAaA,EACbN,QAASA,EACTa,WAAYA,EACZhB,SAAUA,SAGZ,EAAKhF,SAAS,CAAC6C,YAAauD,KA5KJ,EAoL5BI,eAAiB,SAAClB,GACZA,GAAGA,EAAEmB,iBACT,EAAKzG,SAAS,CAAC,UAAY,KAtLD,EA6L5B0G,oBAAsB,SAACpB,GACrB,EAAKtF,SAAS,CAAC2G,iBAAkB,EAAKpH,MAAMoH,mBA9LlB,EAgW5BC,UAAY,SAAAC,GACV,EAAK7G,SAAS,CAAC8G,UAAW,GAAIjE,YAAa,MAjWjB,EAwW5BkE,WAAa,SAAAzB,GACX,IAAO0B,EAAuB,EAAKzH,MAA5ByH,oBACD3F,EAAQiE,EAAE9H,OAAO6D,MACnB2F,GAAuBC,YAAkB5F,GAE3C,EAAKrB,SAAS,CAAC8G,UAAWzF,IAAQ,gBAElB9E,IAAV8E,GAAiC,KAAVA,EACzB,EAAKrB,SAAS,CAACkH,kBAAkB,IAGjCC,IAAcC,KAAKC,IAAKC,mBAAoB,CAAC7H,KAAM4B,IAAQ1G,MAAK,SAAC4M,GAC/D,IAAIC,EAAS,EAAKjI,MAAMyG,WACpBb,EAAUnB,YAAQuD,EAAS3M,MAE7B4M,EAAM,UADJrC,EACoB,GAEA,YAGxB,EAAKnF,SAAS,CAACgG,WAAYwB,EAAQN,iBAAkB/B,UAO3D,EAAKnF,UAAS,SAAC+F,GAAD,MAAgB,CAACC,WAAW,2BAAKD,EAAUC,YAAhB,IAA4B,UAAa,0BAnY1D,EA2Y5ByB,qBAAuB,SAAAnC,GACjB,EAAK/F,MAAMoH,gBACb,EAAK3G,SAAS,CAAC0H,aAAa,IAE5B,EAAKC,aAAaC,eAAe,CAACC,SAAU,YA/YpB,EAyb5BC,aAAe,WACb,MAA6C,EAAKvI,MAA3CwI,EAAP,EAAOA,kBAAmBpB,EAA1B,EAA0BA,gBACrBA,GAAyC,IAAtBoB,IAA8BpB,GAAyC,IAAtBoB,EACvE,EAAKC,aAAa,MAElB,EAAKC,eAAeF,EAAoB,IA9bhB,EAkc5BG,aAAe,WACb,IAAOH,EAAqB,EAAKxI,MAA1BwI,kBACP,EAAKE,eAAeF,EAAoB,IApcd,EAwc5BE,eAAiB,SAACE,GAChB,EAAKnI,SAAS,CAAC+H,kBAAmBI,KAzcR,EA6c5BC,aAAe,YAA0B,IAAxBL,EAAuB,EAAvBA,kBAETM,EAAa,CACjB,uBACA,eACA,mBAGF,OACI,kBAACC,EAAA,EAAD,CAAWlP,UAAU,YACnB,kBAACmP,EAAA,EAAD,KACGF,EAAW/E,KAAI,SAACgD,EAAM9C,GAErB,OADAA,GAAO,EAEH,kBAAC,IAAMgF,SAAP,CAAgB1K,IAAK0F,GACnB,kBAACoB,EAAA,EAAD,CACIxL,UAAW,gBAAmB2O,IAAsBvE,EAf1C,cAeyE,IACnFiF,GAAI,EAAG9D,GAAI,GACb,4BAAQvL,UAAU,qBACV6C,QAAS,kBAAM,EAAKgM,eAAezE,KAAOA,GAClD,4BAAK8C,IAEN9C,IAAQ6E,EAAW1K,QAAU,kBAACiH,EAAA,EAAD,CAAK6D,GAAI,EAAGrP,UAAW,qBACnD,yBAAKA,UAAU,0CAlejC,EAAKmG,MAAQ,CAEXmJ,YAAY,EACZC,UAAU,EACVjB,aAAa,EACbZ,UAAW,GACXE,qBAAqB,EAErBL,iBAAiB,EACjBjB,WAAY,GACZkD,gBAAiB,GACjB5D,SAAU,GACV6D,oBAAoB,EAEpBhG,YAAa,GACbqE,kBAAkB,EAClBlB,WAAY,CAACc,UAAW,IACxBrB,YAAa,GACbN,QAAS,GAET4C,kBAAmB,GAGrB,EAAKe,oBAAsB,KAE3B,EAAKd,aAAe,EAAKA,aAAarM,KAAlB,gBACpB,EAAKoN,gBAAkB,EAAKA,gBAAgBpN,KAArB,gBACvB,EAAKqN,oBAAsB,EAAKA,oBAAoBrN,KAAzB,gBAC3B,EAAKsN,kBAAoB,EAAKA,kBAAkBtN,KAAvB,gBA9BC,E,4FA4C5B,8BAAAuN,EAAA,6DACSpC,EAAalL,KAAK2D,MAAlBuH,UADT,kBAIoBK,IAAcC,KAAKC,IAAKC,mBAAoB,CAAC7H,KAAMqH,IAJvE,OAIQ3L,EAJR,OAOS6I,YAAQ7I,EAAIP,QAEfuO,cAAcvN,KAAKkN,qBACnBlN,KAAKkN,oBAAsB,KAC3BlN,KAAKmN,kBACLnN,KAAKjC,MAAMyP,QAAQ/L,KAAK,eAZ9B,gDAiBIgM,IAAM9N,MAAN,uCAA2C,CACzC+N,WAAW,IAlBjB,yD,gFAyJA,WAEE,MAAiD1N,KAAK2D,MAA/C2H,EAAP,EAAOA,iBAAkBrE,EAAzB,EAAyBA,YAAasC,EAAtC,EAAsCA,QAClCoE,GAAO,EAENrC,IACHqC,GAAO,GAEW,KAAhB1G,IACF0G,GAAO,GAKT,cAA2BzM,OAAO0M,QAAQrE,GAA1C,eAAoD,CAA/C,0BAAOrH,EAAP,KAAYuD,EAAZ,KACH,IAAKvD,IAAQuD,EAAO,CAClBkI,GAAO,EACP,OAIJ,OAAOA,I,6BAMT,WACE3N,KAAKoE,UAAS,SAACT,EAAO5F,GACpB,MAAO,CAACkP,oBAAqBtJ,EAAMsJ,yB,iCAOvC,WACEjN,KAAKmN,kBAE4B,OAA7BnN,KAAKkN,oBACPlN,KAAKkN,oBAAsBW,YAAY7N,KAAKqN,kBAAmBS,KAE/DC,QAAQpO,MAAM,0D,gCAQlB,WACEK,KAAKoE,UAAS,SAACT,EAAO5F,GACpB,MAAO,CAACkP,oBAAoB,MAE9BM,cAAcvN,KAAKkN,uB,iEAQrB,WAAmBxD,GAAnB,mCAAA4D,EAAA,yDACE5D,GAAKA,EAAEmB,iBADT,EAIoC7K,KAAK2D,MAAhCmG,EAJT,EAISA,WAAY7C,EAJrB,EAIqBA,YACZ7H,EAAaY,KAAKjC,MAAlBqB,WAGHY,KAAKgO,eARX,yBAUwBrN,IAAhBsG,GAA6C,KAAhBA,EAVrC,yBAY8BtG,KADlB4G,EAAkBZ,YAAevH,EAAW6H,IAXxD,iBAecgH,EAAW1G,EAAgBE,QAI7ByG,EAAuB,GAnBnC,aAsBa,0BAAOhM,EAAP,KAAYuD,EAAZ,KAEH,GAAY,UAARvD,EAEF,OADAgM,EAAqBhM,GAAOuD,EAC5B,WAEF,IAAM0I,EAAkBF,EAASG,MAAK,SAACC,EAAKzG,EAAK0G,GAE/C,OAAQpM,IAAQmM,EAAIvF,QAElBqF,IAGE1I,IADiB0I,EAAdxD,aAGLuD,EAAqBhM,GAAOuD,KArC1C,MAsBmCvE,OAAO0M,QAAQ9D,GAtBlD,qJA4CY9K,EAAO,CACTuP,WAAYL,EAEZrK,KAAM7D,KAAK2D,MAAMuH,UACjBjM,KAAMe,KAAK2D,MAAMsD,aAKnBjH,KAAKoN,sBArDb,UAuDgCpN,KAAKjC,MAAMyQ,MAAMC,OAAhCxH,YAvDjB,kCA2DkBsE,IAAcC,KAAKC,IAAKiD,aAAc1P,GA3DxD,QA4DYyO,IAAMkB,KAAK,kBA5DvB,yCA8DkBpD,IAAcC,KAAKC,IAAKmD,aAAc5P,GA9DxD,QA+DYyO,IAAMkB,KAAK,kBA/DvB,2DAmEUlB,IAAM9N,MAAN,uCAA6C,CAC3C+N,WAAW,IAEb1N,KAAK6O,qBAtEf,gCAmFIpB,IAAMqB,KAAN,sCAAkD,CAChDpB,WAAW,IApFjB,2D,sFAqJA,WAAqB,IAAD,OACXzG,EAAejH,KAAKjC,MAAMyQ,MAAMC,OAAhCxH,cAGFjH,KAAKjC,MAAMqB,WAAaY,KAAKjC,MAAMqB,UAAU2C,OAAS,IACzD/B,KAAKjC,MAAMa,eAETqI,IAEFjH,KAAKoE,SAAS,CAAC8G,UAAWjE,EAAaqE,kBAAkB,EAAMF,qBAAqB,IACpFG,IAAcC,KAAKC,IAAKC,mBAAoB,CAAC7H,KAAMoD,IAAclI,MAC7D,SAACQ,GACCwO,QAAQgB,IAAIxP,GACZ,EAAK8K,qBAAgB1J,EAAW,CAAC4J,SAAUhL,EAAIP,KAAKC,OAEpD,EAAKmF,UAAS,SAAC+F,GAAD,MAAgB,CAC5BL,WAAW,2BAAKK,EAAUL,YAAevK,EAAIP,gB,kCAYzD,WACEuO,cAAcvN,KAAKkN,qBACnBlN,KAAKkN,oBAAsB,O,oBAkF7B,WAAU,IAAD,OACP,EAAuFlN,KAAK2D,MAArFsD,EAAP,EAAOA,YAAa8D,EAApB,EAAoBA,gBAAiBG,EAArC,EAAqCA,UAAWI,EAAhD,EAAgDA,iBAAkBa,EAAlE,EAAkEA,kBAC3D/M,EAAaY,KAAKjC,MAAlBqB,UACP,OACI,yBAAKgB,YAAU,qBACb,6BACE,uBAAG5C,UAAU,qBACb,kBAACwR,EAAA,EAAD,CAAQ5R,MAAM,OAAOiD,QAAS,kBAAM,EAAKtC,MAAMyP,QAAQ/L,KAAK,qBAA5D,iBAGF,kBAACwN,EAAA,EAAD,KACE,gJAEA,uBAAMzC,aAAN,CAAmBL,kBAAmBA,IACtC,kBAACpJ,EAAA,EAAD,CAAU5C,OAA8B,IAAtBgM,GAChB,kBAACrO,EAAA,EAAD,KAEE,kBAACa,EAAA,EAAD,KACE,kBAAC0K,EAAD,CAAaC,MAAM,0CACNnC,cAAenH,KAAKmL,WAAY1F,MAAOyF,EACvCrE,YAAa,eAAgBhD,KAAK,OAAOsF,GAAG,YAC5CI,QAAS+B,IAEtB,kBAAC5C,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAYE,GAAI,GAA3B,UACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAAC,EAAD,CAAqBxC,YAAanH,EAAWqG,MAAOwB,EAC/BR,SAAUzG,KAAKqK,oBAGxC,kBAAC3B,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACK,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACH,EAAA,EAAD,CAAOC,IAAI,kBAAX,0BAA2D,IAC3D,uBAAGqG,KAAK,0CAAR,uBAGJ,yBAAK1R,UAAU,YACb,yBAAKA,UAAU,eAEb,kBAACwR,EAAA,EAAD,CAAQxR,UAAU,gBAAgB6C,QAASL,KAAKkM,cAAhD,aAQV,kBAACnJ,EAAA,EAAD,CAAU5C,OAA8B,IAAtBgM,GAChB,kBAACrO,EAAA,EAAD,KAGE,kBAACa,EAAA,EAAD,KACE,kBAACqI,EAAD,CAAiBC,YAAaA,EAAaC,cAAc,EACxCC,cAAenH,KAAK2J,kBACpBrC,UAAWtH,KAAK2D,MAAMyG,WACtB/C,WAAYrH,KAAK2D,MAAM4F,QACvBnC,cAAepH,KAAK2D,MAAMmG,WAAYtE,OAAQpG,IAE/D,yBAAK5B,UAAU,YACb,yBAAKA,UAAU,eACb,kBAACyL,EAAA,EAAD,CAAOhK,KAAK,WAAWwG,MAAOsF,EACvBtE,SAAUzG,KAAK8K,sBAAsB,0BAAMtN,UAAU,QAAhB,yBAC5C,kBAACwR,EAAA,EAAD,CAAQxR,UAAU,oBAAoB6C,QAASL,KAAKsM,cAApD,WAGA,kBAAC0C,EAAA,EAAD,CAAQxR,UAAU,gBAAgB6C,QAASL,KAAKkM,cAAhD,aAOV,kBAACnJ,EAAA,EAAD,CAAU5C,OAA8B,IAAtBgM,GAChB,kBAACrO,EAAA,EAAD,KAYE,kBAACa,EAAA,EAAD,KACE,kBAACqI,EAAD,CAAiBC,YAAaA,EAAaC,cAAc,EACxCC,cAAenH,KAAK2J,kBACpBrC,UAAWtH,KAAK2D,MAAMyG,WACtB/C,WAAYrH,KAAK2D,MAAM4F,QACvBnC,cAAepH,KAAK2D,MAAMmG,WAAYtE,OAAQpG,IAE/D,yBAAK5B,UAAU,YACb,yBAAKA,UAAU,eACb,kBAACyL,EAAA,EAAD,CAAOhK,KAAK,WAAWwG,MAAOsF,EACvBtE,SAAUzG,KAAK8K,sBAAsB,0BAAMtN,UAAU,QAAhB,yBAC5C,kBAACwR,EAAA,EAAD,CAAQxR,UAAU,oBAAoB6C,QAASL,KAAKsM,cAApD,WAGA,kBAAC0C,EAAA,EAAD,CAAQxR,UAAU,gBAAgB6C,QAASL,KAAKkM,cAAhD,aAiBV,kBAACrM,EAAA,EAAD,CAAmBK,UAAWF,KAAK2D,MAAMsJ,mBAAoBhN,WAAYD,KAAKmN,wB,GA9nBnE7O,IAAMgC,WAkpB7BkJ,EAAS9K,aAAe,CACtByQ,QAAQ,GAGKC,uBAlBS,SAAAzL,GAAK,MAAK,CAIhCvE,UAAWuE,EAAM6B,OAAOpG,aAcc,CAACR,kBAA1BwQ,CAAyC5F","file":"static/js/18.5b1387cf.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\r\nimport {getAllConfigDump, getAllProviders} from \"rclone-api\";\r\n\r\n/**\r\n * Gets all Providers from the rclone UI Backend\r\n * @returns {Function}\r\n */\r\nexport const getProviders = () => dispatch => {\r\n    getAllProviders().then(data => dispatch({\r\n        type: GET_PROVIDERS,\r\n        payload: data.providers\r\n    }))\r\n};\r\n/**\r\n * Gets dump of configured remotes from the rclone backend\r\n * @returns {Function}\r\n */\r\nexport const getConfigDump = () => dispatch => {\r\n    getAllConfigDump().then(res => dispatch({\r\n        type: GET_CONFIG_DUMP,\r\n        status: REQUEST_SUCCESS,\r\n        payload: res\r\n    }), error => dispatch({\r\n        type: GET_CONFIG_DUMP,\r\n        status: REQUEST_ERROR,\r\n        payload: error\r\n    }))\r\n};\r\n","import React from \"react\";\r\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport * as  PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\r\n\r\n\r\nclass NewDriveAuthModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.props.closeModal();\r\n    }\r\n\r\n\r\n    render() {\r\n        const {isVisible} = this.props;\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <Modal isOpen={isVisible} toggle={this.toggle}>\r\n                        <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\r\n                        <ModalBody data-test=\"modalBody\">\r\n                            A page will open for you with the authentication for your drive. This modal will\r\n                            automatically\r\n                            dismiss upon successful creation\r\n                        </ModalBody>\r\n                        <ModalFooter data-test=\"modalFooter\">\r\n                            <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\r\n                            {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                </ErrorBoundary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNewDriveAuthModal.propTypes = {\r\n    isVisible: PropTypes.bool.isRequired,\r\n    closeModal: PropTypes.func.isRequired\r\n};\r\nNewDriveAuthModal.defaultProps = {\r\n    isVisible: true,\r\n};\r\n\r\n\r\nexport default NewDriveAuthModal;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _transitionStatusToCl;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread(_objectSpread({}, Transition.propTypes), {}, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread(_objectSpread({}, Transition.defaultProps), {}, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return /*#__PURE__*/React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread(_objectSpread({}, childProps.style), style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import Autosuggest from 'react-autosuggest';\r\nimport React from \"react\";\r\nimport {findFromConfig} from \"../../../utils/Tools\";\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = (config, value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    if (inputLength === 0) {\r\n        return config;\r\n\r\n    }\r\n\r\n    return inputLength === 0 ? [] : config.filter(lang =>\r\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\r\n    );\r\n};\r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\nconst getSuggestionValue = suggestion => suggestion.Prefix;\r\n\r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = suggestion => (\r\n    <div>\r\n        {suggestion.Description}\r\n    </div>\r\n);\r\n\r\nclass ProviderAutoSuggest extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Autosuggest is a controlled component.\r\n        // This means that you need to provide an input value\r\n        // and an onChange handler that updates this value (see below).\r\n        // Suggestions also need to be provided to the Autosuggest,\r\n        // and they are initially empty because the Autosuggest is closed.\r\n        this.state = {\r\n            suggestions: []\r\n        };\r\n    }\r\n\r\n\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n    // You already implemented this logic above, so just use it.\r\n    onSuggestionsFetchRequested = ({value}) => {\r\n        // console.log(value);\r\n        this.setState({\r\n            suggestions: getSuggestions(this.props.suggestions, value)\r\n        });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to clear suggestions.\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const {value, onChange, suggestions} = this.props;\r\n        const currentConfig = findFromConfig(suggestions, value);\r\n        let renderVal = \"\";\r\n        if (currentConfig === undefined) {\r\n            renderVal = value;\r\n        } else {\r\n            renderVal = currentConfig.Description;\r\n        }\r\n\r\n        // Autosuggest will pass through all these props to the input.\r\n        const inputProps = {\r\n            placeholder: 'Type a provider type',\r\n            value: renderVal,\r\n            onChange: onChange\r\n        };\r\n\r\n        // Finally, render it!\r\n        return (\r\n            <Autosuggest\r\n                suggestions={this.state.suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={getSuggestionValue}\r\n                renderSuggestion={renderSuggestion}\r\n                alwaysRenderSuggestions={true}\r\n                highlightFirstSuggestion={true}\r\n                inputProps={inputProps}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProviderAutoSuggest;","import React from 'react';\r\nimport {Button, Card, CardBody, Col, Collapse, Container, FormFeedback, FormGroup, Input, Label, Row} from \"reactstrap\";\r\n// import {config} from \"./config.js\";\r\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\r\nimport axiosInstance from \"../../../utils/API/API\";\r\nimport {\r\n  findFromConfig,\r\n  isEmpty,\r\n  validateDriveName,\r\n  validateDuration,\r\n  validateInt,\r\n  validateSizeSuffix\r\n} from \"../../../utils/Tools\";\r\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\r\nimport {toast} from \"react-toastify\";\r\nimport * as PropTypes from 'prop-types';\r\nimport {getProviders} from \"../../../actions/configActions\";\r\nimport {connect} from \"react-redux\";\r\nimport {NEW_DRIVE_CONFIG_REFRESH_TIMEOUT} from \"../../../utils/Constants\";\r\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\r\nimport urls from \"../../../utils/API/endpoint\";\r\n\r\n/**\r\n * Returns a component with set of input, error for the drivePrefix.\r\n * The input type changes based on config.Options.Type parameter. see code for details.\r\n * @param drivePrefix   {string}    Name of the remote in the config.\r\n * @param loadAdvanced  {boolean}   Load or skip the advanced options from the config options.\r\n * @param changeHandler {function}  This function is called once the value changes\r\n * @param currentValues {$ObjMap}   This map denotes current updated values for the parameters.\r\n * @param isValidMap    {$ObjMap}   This map denotes whether the parameter value is valid. This should be set by the changeHandler.\r\n * @param errorsMap     {$ObjMap}   This map contains string errors of each parameters.\r\n * @param config        {$ObjMap}   This map contains the actual parameter list and Options for all the providers.\r\n * @returns             {Array|*}   JSX array with parameter formGroups.\r\n * @constructor\r\n */\r\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\r\n  if (drivePrefix !== undefined && drivePrefix !== \"\") {\r\n    const currentProvider = findFromConfig(config, drivePrefix);\r\n    let outputMap = [];\r\n    if (currentProvider !== undefined) {\r\n      const inputsMap = currentProvider.Options;\r\n\r\n      // console.log(\"current values\" + currentValues);\r\n\r\n      /* Options format is as follows\r\n      {\r\n                  \"Advanced\": true,\r\n                  \"Default\": -1,\r\n                  \"DefaultStr\": \"off\",\r\n                  \"Help\": \"If Object's are greater, use drive v2 API to download.\",\r\n                  \"Hide\": 0,\r\n                  \"IsPassword\": false,\r\n                  \"Name\": \"v2_download_min_size\",\r\n                  \"NoPrefix\": false,\r\n                  \"Provider\": \"\",\r\n                  \"Required\": false,\r\n                  \"ShortOpt\": \"\",\r\n                  \"Type\": \"SizeSuffix\",\r\n                  \"Value\": null,\r\n                  \"ValueStr\": \"off\"\r\n              },\r\n\r\n      */\r\n\r\n      outputMap = inputsMap.map((attr, idx) => {\r\n        if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\r\n          const labelValue = `${attr.Help}`;\r\n          const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\r\n\r\n          const hasExamples = !isEmpty(attr.Examples);\r\n          let examplesMap = null;\r\n\r\n          let inputType = \"\";\r\n\r\n\r\n          if (attr.IsPassword) {\r\n            inputType = \"password\";\r\n          } else if (hasExamples) {\r\n            inputType = \"string\";\r\n            // examplesMap = attr.Examples.map((ex1, id1) => {\r\n            //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\r\n            // })\r\n          } else if (attr.Type === \"bool\") {\r\n            inputType = \"select\";\r\n            examplesMap = [\r\n              (<option key={1} value={true}>Yes</option>),\r\n              (<option key={2} value={false}>No</option>)\r\n            ];\r\n          } else {\r\n            // TODO: Write logic for SizeSuffix, Duration, int\r\n            if (attr.Type === \"int\") {\r\n              inputType = \"number\";\r\n            } else if (attr.Type === \"string\") {\r\n              inputType = \"text\";\r\n            } else {\r\n              inputType = \"text\";\r\n            }\r\n\r\n          }\r\n          return (\r\n              <FormGroup key={idx} row>\r\n                <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\r\n                <Col sm={7}>\r\n                  <Input type={inputType} value={currentValues[attr.Name]}\r\n                         name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\r\n                         id={attr.Name} onChange={changeHandler} required={attr.Required}>\r\n                    {examplesMap}\r\n                  </Input>\r\n                  <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\r\n\r\n                </Col>\r\n              </FormGroup>\r\n          );\r\n        } else {\r\n          return null;\r\n        }\r\n      });\r\n    }\r\n    return outputMap;\r\n  }\r\n  return (\r\n      <div>Select a drive type to continue</div>\r\n  );\r\n}\r\n\r\n// function DriveTypes({config}) {\r\n//     // console.log(config);\r\n//     let configMap = config.map((drive, idx) => (\r\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\r\n//     ));\r\n//     return configMap;\r\n// }\r\n\r\n\r\n/**\r\n * Functional Component. Custom input for selecting a new name for the current config.\r\n * @param key           {string}    Contains the key to be used as the react key parameter in an array\r\n * @param id            {string}    Id to be used as a HTML id.\r\n * @param label         {string}    Label of the form input\r\n * @param changeHandler {function}  Called when the input changes.\r\n * @param type          {string}    Type of the input (ReactStrap supported). Eg: select, text etc.\r\n * @param value         {string}    The current value of the input.\r\n * @param name          {string}    The html name for the input.\r\n * @param placeholder   {string}    Placeholder text for input.\r\n * @param isValid       {boolean}   If set, displays positive message, else displays error message.\r\n * @returns             {*}         Functional component.\r\n * @constructor\r\n */\r\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\r\n  return (\r\n      <FormGroup key={key} row>\r\n        <Label for={id} sm={5}>{label}</Label>\r\n        <Col sm={7}>\r\n          <Input type={type} value={value} name={name} placeholder={placeholder}\r\n                 id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\r\n          <FormFeedback valid>Sweet! that name is available</FormFeedback>\r\n          <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\r\n        </Col>\r\n      </FormGroup>);\r\n}\r\n\r\n/**\r\n * Component to create a new remote configuration.\r\n */\r\nclass NewDrive extends React.Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n\r\n      colRconfig: true,\r\n      colSetup: false,\r\n      colAdvanced: false,\r\n      driveName: \"\",\r\n      driveNameIsEditable: true,\r\n\r\n      advancedOptions: false,\r\n      formValues: {},\r\n      formValuesValid: {},\r\n      required: {},\r\n      authModalIsVisible: false,\r\n\r\n      drivePrefix: \"\",\r\n      driveNameIsValid: false,\r\n      formErrors: {driveName: \"\"},\r\n      optionTypes: {},\r\n      isValid: {},\r\n\r\n      currentStepNumber: 1\r\n\r\n    };\r\n    this.configCheckInterval = null;\r\n    // console.log(\"Params\", this.props.match.params);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.toggleAuthModal = this.toggleAuthModal.bind(this);\r\n    this.startAuthentication = this.startAuthentication.bind(this);\r\n    this.checkConfigStatus = this.checkConfigStatus.bind(this);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param e {$ObjMap} Event of the toggle event.\r\n   */\r\n  toggle = (e) => {\r\n    let name = e.target.name;\r\n\r\n    this.setState({[name]: !this.state[name]})\r\n  };\r\n\r\n  // Returns true or false based on whether the config is created\r\n  async checkConfigStatus() {\r\n    const {driveName} = this.state;\r\n\r\n    try {\r\n      let res = await axiosInstance.post(urls.getConfigForRemote, {name: driveName});\r\n      // console.log(res);\r\n\r\n      if (!isEmpty(res.data)) {\r\n        // Config is created, clear the interval and hide modal\r\n        clearInterval(this.configCheckInterval);\r\n        this.configCheckInterval = null;\r\n        this.toggleAuthModal();\r\n        this.props.history.push('/dashboard');\r\n\r\n      }\r\n    } catch (e) {\r\n      // console.log(`Error occurred while checking for config: ${e}`);\r\n      toast.error(`Error creating config. ${e}`, {\r\n        autoClose: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle inoit change and set appropriate errors.\r\n   * @param e\r\n   */\r\n  handleInputChange = (e) => {\r\n\r\n    let inputName = e.target.name;\r\n    let inputValue = e.target.value;\r\n    const inputType = this.state.optionTypes[inputName];\r\n    this.setState({\r\n      formValues: {\r\n        ...this.state.formValues,\r\n        [inputName]: inputValue\r\n      }\r\n    });\r\n    let validateResult = true;\r\n    let error = \"\";\r\n    if (inputType === \"SizeSuffix\") {\r\n      validateResult = validateSizeSuffix(inputValue);\r\n      if (!validateResult) {\r\n        error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\r\n      }\r\n    } else if (inputType === \"Duration\") {\r\n      validateResult = validateDuration(inputValue);\r\n      if (!validateResult) {\r\n        error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\r\n      }\r\n    } else if (inputType === \"int\") {\r\n      validateResult = validateInt(inputValue);\r\n      if (!validateResult) {\r\n        error = \"The valid input is int (100,200,300 etc)\"\r\n      }\r\n    }\r\n\r\n    if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\r\n      validateResult = false;\r\n      if (!validateResult) {\r\n        error += \" This field is required\";\r\n      }\r\n    }\r\n\r\n\r\n    this.setState((prevState) => {\r\n      return {\r\n        isValid: {\r\n          ...prevState.isValid,\r\n          [inputName]: validateResult\r\n        },\r\n        formErrors: {\r\n          ...prevState.formErrors,\r\n          [inputName]: error\r\n        },\r\n      }\r\n    });\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   * Update the driveType and then load the equivalent input parameters for that drive.\r\n   * @param event     {$ObjMap} Event to be handled.\r\n   * @param newValue  {string} new Value of the drive type.\r\n   */\r\n  changeDriveType = (event, {newValue}) => {\r\n\r\n    const {providers} = this.props;\r\n\r\n    let val = newValue;\r\n\r\n\r\n    let availableOptions = {};\r\n    let optionTypes = {};\r\n    let isValid = {};\r\n    let formErrors = {};\r\n    let required = {};\r\n    // let drivePrefix = \"\";\r\n    // console.log(\"driveType change\", val);\r\n    if (val !== undefined && val !== \"\") {\r\n\r\n      const currentConfig = findFromConfig(providers, val);\r\n      if (currentConfig !== undefined) {\r\n\r\n        currentConfig.Options.forEach(item => {\r\n\r\n          const {DefaultStr, Type, Name, Required, Hide} = item;\r\n          if (Hide === 0) {\r\n            availableOptions[Name] = DefaultStr;\r\n            optionTypes[Name] = Type;\r\n            required[Name] = Required;\r\n\r\n            isValid[Name] = !(Required && (!DefaultStr || DefaultStr === \"\"));\r\n\r\n            formErrors[Name] = \"\";\r\n          }\r\n        });\r\n      }\r\n      this.setState({\r\n        drivePrefix: val,\r\n        formValues: availableOptions,\r\n        optionTypes: optionTypes,\r\n        isValid: isValid,\r\n        formErrors: formErrors,\r\n        required: required\r\n      });\r\n    } else {\r\n      this.setState({drivePrefix: val})\r\n\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Open second step of setting up the drive and scroll into view.\r\n   */\r\n  openSetupDrive = (e) => {\r\n    if (e) e.preventDefault();\r\n    this.setState({'colSetup': true});\r\n    // this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\r\n  };\r\n\r\n  /**\r\n   *  toggle the step 3: advanced options\r\n   */\r\n  editAdvancedOptions = (e) => {\r\n    this.setState({advancedOptions: !this.state.advancedOptions});\r\n  };\r\n\r\n  /**\r\n   * Validate the form and set the appropriate errors in the state.\r\n   * @returns {boolean}\r\n   */\r\n  validateForm() {\r\n    //    Validate driveName and other parameters\r\n    const {driveNameIsValid, drivePrefix, isValid} = this.state;\r\n    let flag = true;\r\n\r\n    if (!driveNameIsValid) {\r\n      flag = false;\r\n    }\r\n    if (drivePrefix === \"\") {\r\n      flag = false;\r\n    }\r\n\r\n\r\n    /*Check for validations based on inputType*/\r\n    for (const [key, value] of Object.entries(isValid)) {\r\n      if (!key || !value) {\r\n        flag = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return flag;\r\n  }\r\n\r\n  /**\r\n   *  Show or hide the auth modal.\r\n   */\r\n  toggleAuthModal() {\r\n    this.setState((state, props) => {\r\n      return {authModalIsVisible: !state.authModalIsVisible}\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Show or hide the authentication modal and start timer for checking if the new config is created.\r\n   */\r\n  startAuthentication() {\r\n    this.toggleAuthModal();\r\n    // Check every second if the config is created\r\n    if (this.configCheckInterval === null) {\r\n      this.configCheckInterval = setInterval(this.checkConfigStatus, NEW_DRIVE_CONFIG_REFRESH_TIMEOUT);\r\n    } else {\r\n      console.error(\"Interval already running. Should not start a new one\");\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   *  Called when the config is successfully created. Clears the timout and hides the authentication modal.\r\n   */\r\n  stopAuthentication() {\r\n    this.setState((state, props) => {\r\n      return {authModalIsVisible: false}\r\n    });\r\n    clearInterval(this.configCheckInterval);\r\n\r\n  }\r\n\r\n  /**\r\n   * Called when form action submit is to be handled.\r\n   * Validate form and submit request.\r\n   * */\r\n  async handleSubmit(e) {\r\n    e && e.preventDefault();\r\n    // console.log(\"Submitted form\");\r\n\r\n    const {formValues, drivePrefix} = this.state;\r\n    const {providers} = this.props;\r\n\r\n\r\n    if (this.validateForm()) {\r\n\r\n      if (drivePrefix !== undefined && drivePrefix !== \"\") {\r\n        const currentProvider = findFromConfig(providers, drivePrefix);\r\n        if (currentProvider !== undefined) {\r\n\r\n\r\n          const defaults = currentProvider.Options;\r\n\r\n          // console.log(config, formValues, defaults);\r\n\r\n          let finalParameterValues = {};\r\n\r\n\r\n          for (const [key, value] of Object.entries(formValues)) {\r\n\r\n            if (key === \"token\") {\r\n              finalParameterValues[key] = value;\r\n              continue;\r\n            }\r\n            const defaultValueObj = defaults.find((ele, idx, array) => {\r\n              // console.log(key, ele.Name, key === ele.Name);\r\n              return (key === ele.Name);\r\n            });\r\n            if (defaultValueObj) {\r\n\r\n              const {DefaultStr} = defaultValueObj;\r\n              if (value !== DefaultStr) {\r\n                // console.log(`${value} !== ${DefaultStr}`);\r\n                finalParameterValues[key] = value;\r\n              }\r\n            }\r\n\r\n          }\r\n\r\n\r\n          let data = {\r\n            parameters: finalParameterValues,\r\n\r\n            name: this.state.driveName,\r\n            type: this.state.drivePrefix\r\n          };\r\n\r\n\r\n          // console.log(\"Validated form\");\r\n          this.startAuthentication();\r\n          try {\r\n            const {drivePrefix} = this.props.match.params;\r\n\r\n            if (!drivePrefix) {\r\n\r\n              await axiosInstance.post(urls.createConfig, data);\r\n              toast.info(\"Config created\");\r\n            } else {\r\n              await axiosInstance.post(urls.updateConfig, data);\r\n              toast.info(\"Config Updated\");\r\n            }\r\n\r\n          } catch (err) {\r\n            toast.error(`Error creating config. ${err}`, {\r\n              autoClose: false\r\n            });\r\n            this.stopAuthentication();\r\n          }\r\n\r\n        }\r\n      }\r\n    } else {\r\n      // if (!this.state.colSetup) {\r\n      //     this.openSetupDrive();\r\n      // }\r\n\r\n      // if (this.state.advancedOptions && !this.state.colAdvanced) {\r\n      //     this.openAdvancedSettings();\r\n      // }\r\n      toast.warn(`Check for errors before submitting.`, {\r\n        autoClose: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the entire form.\r\n   * Clearing the driveName and drivePrefix automatically clears the inputs as well.\r\n   * */\r\n  clearForm = _ => {\r\n    this.setState({driveName: \"\", drivePrefix: \"\"})\r\n  };\r\n\r\n\r\n  /**\r\n   * Change the name of the drive. Check if it already exists, if not, allow to be changes, else set error.\r\n   * */\r\n  changeName = e => {\r\n    const {driveNameIsEditable} = this.state;\r\n    const value = e.target.value;\r\n    if (driveNameIsEditable && validateDriveName(value)) {\r\n\r\n      this.setState({driveName: value}, () => {\r\n\r\n        if (value === undefined || value === \"\") {\r\n          this.setState({driveNameIsValid: false});\r\n        } else {\r\n\r\n          axiosInstance.post(urls.getConfigForRemote, {name: value}).then((response) => {\r\n            let errors = this.state.formErrors;\r\n            let isValid = isEmpty(response.data);\r\n            if (isValid) {\r\n              errors[\"driveName\"] = \"\";\r\n            } else {\r\n              errors[\"driveName\"] = \"Duplicate\";\r\n\r\n            }\r\n            this.setState({formErrors: errors, driveNameIsValid: isValid});\r\n          });\r\n        }\r\n\r\n      });\r\n\r\n    } else {\r\n      this.setState((prevState) => ({formErrors: {...prevState.formErrors, \"driveName\": \"Cannot edit name\"}}))\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Open the advanced settings card and scroll into view.\r\n   * @param e\r\n   */\r\n  openAdvancedSettings = e => {\r\n    if (this.state.advancedOptions) {\r\n      this.setState({colAdvanced: true});\r\n    } else {\r\n      this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Check if the provider list is empty else request new providers list.\r\n   * */\r\n\r\n  componentDidMount() {\r\n    const {drivePrefix} = this.props.match.params;\r\n\r\n\r\n    if (!this.props.providers || this.props.providers.length < 1)\r\n      this.props.getProviders();\r\n\r\n    if (drivePrefix) {\r\n      //Edit Mode\r\n      this.setState({driveName: drivePrefix, driveNameIsValid: true, driveNameIsEditable: false});\r\n      axiosInstance.post(urls.getConfigForRemote, {name: drivePrefix}).then(\r\n          (res) => {\r\n            console.log(res);\r\n            this.changeDriveType(undefined, {newValue: res.data.type});\r\n\r\n            this.setState((prevState) => ({\r\n              formValues: {...prevState.formValues, ...res.data}\r\n            }))\r\n\r\n          }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the intervals.\r\n   * */\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.configCheckInterval);\r\n    this.configCheckInterval = null;\r\n  }\r\n\r\n  gotoNextStep = () => {\r\n    const {currentStepNumber, advancedOptions} = this.state;\r\n    if ((advancedOptions && currentStepNumber === 3) || (!advancedOptions && currentStepNumber === 2)) {\r\n      this.handleSubmit(null);\r\n    } else {\r\n      this.setCurrentStep(currentStepNumber + 1);\r\n    }\r\n  };\r\n\r\n  gotoPrevStep = () => {\r\n    const {currentStepNumber} = this.state;\r\n    this.setCurrentStep(currentStepNumber - 1);\r\n  };\r\n\r\n\r\n  setCurrentStep = (stepNo) => {\r\n    this.setState({currentStepNumber: stepNo});\r\n\r\n  };\r\n\r\n  StepShowCase = ({currentStepNumber}) => {\r\n    const buttonActiveClassName = \"step-active\";\r\n    const stepTitles = [\r\n      \"Set up Remote Config\",\r\n      \"Set up Drive\",\r\n      \"Advanced Config\"\r\n    ];\r\n\r\n    return (\r\n        <Container className=\"timeline\">\r\n          <Row>\r\n            {stepTitles.map((item, idx) => {\r\n              idx += 1;\r\n              return (\r\n                  <React.Fragment key={idx}>\r\n                    <Col\r\n                        className={\"text-center \" + ((currentStepNumber === idx) ? buttonActiveClassName : \"\")}\r\n                        md={2} sm={4}>\r\n                      <button className=\"btn btn-step-count\"\r\n                              onClick={() => this.setCurrentStep(idx)}>{idx}</button>\r\n                      <h4>{item}</h4>\r\n                    </Col>\r\n                    {idx !== stepTitles.length && <Col md={3} className={\"d-none d-md-block\"}>\r\n                      <div className=\"timeline-divider align-middle\"></div>\r\n\r\n                    </Col>}\r\n                  </React.Fragment>\r\n              )\r\n            })}\r\n\r\n          </Row>\r\n        </Container>\r\n    )\r\n\r\n  }\r\n\r\n  /* return (\r\n          <div className=\"timeline\">\r\n              <span className=\"li complete\">\r\n                  <button className=\"btn btn-primary btn-step-count\">1</button>\r\n                  <div class=\"status\">\r\n                      <h4> Shift Created </h4>\r\n                  </div>\r\n              </span>\r\n              <div className=\"timeline-divider\"></div>\r\n              <li className=\"li complete\">\r\n                  <div class=\"status\">\r\n                      <h4> Shift Created </h4>\r\n                  </div>\r\n              </li>\r\n              <li className=\"li complete\">\r\n                  <div class=\"status\">\r\n                      <h4> Shift Created </h4>\r\n                  </div>\r\n              </li>\r\n          </div>\r\n     ) */\r\n\r\n\r\n  render() {\r\n    const {drivePrefix, advancedOptions, driveName, driveNameIsValid, currentStepNumber} = this.state;\r\n    const {providers} = this.props;\r\n    return (\r\n        <div data-test=\"newDriveComponent\">\r\n          <div>\r\n            <i className='icon-arrow-right'/>\r\n            <Button color=\"link\" onClick={() => this.props.history.push(\"/simplenewdrive\")}>\r\n              Web3 storage</Button>\r\n          </div>\r\n          <ErrorBoundary>\r\n            <p>This 3 step process will guide you through creating a new config. For auto config, leave the\r\n              parameters as it is.</p>\r\n            <this.StepShowCase currentStepNumber={currentStepNumber}/>\r\n            <Collapse isOpen={currentStepNumber === 1}>\r\n              <Card>\r\n\r\n                <CardBody>\r\n                  <CustomInput label=\"Name of this drive (For your reference)\"\r\n                               changeHandler={this.changeName} value={driveName}\r\n                               placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\r\n                               isValid={driveNameIsValid}/>\r\n\r\n                  <FormGroup row>\r\n                    <Label for=\"driveType\" sm={5}>Select</Label>\r\n                    <Col sm={7}>\r\n                      <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\r\n                                           onChange={this.changeDriveType}/>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Col sm={3}>\r\n                      <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\r\n                      <a href=\"https://www.ipfsdrive.com/docs#remotes\">IPFS drive Config</a>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <div className=\"clearfix\">\r\n                    <div className=\"float-right\">\r\n\r\n                      <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\r\n\r\n                    </div>\r\n                  </div>\r\n                </CardBody>\r\n\r\n              </Card>\r\n            </Collapse>\r\n            <Collapse isOpen={currentStepNumber === 2}>\r\n              <Card>\r\n                {/*div for Scrolling to here*/}\r\n                {/* <div ref={(el) => this.setupDriveDiv = el}/> */}\r\n                <CardBody>\r\n                  <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\r\n                                   changeHandler={this.handleInputChange}\r\n                                   errorsMap={this.state.formErrors}\r\n                                   isValidMap={this.state.isValid}\r\n                                   currentValues={this.state.formValues} config={providers}/>\r\n\r\n                  <div className=\"clearfix\">\r\n                    <div className=\"float-right\">\r\n                      <Input type=\"checkbox\" value={advancedOptions}\r\n                             onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\r\n                      <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\r\n                        back</Button>\r\n\r\n                      <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\r\n\r\n                    </div>\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n            </Collapse>\r\n            <Collapse isOpen={currentStepNumber === 3}>\r\n              <Card>\r\n                {/* <CardHeader>\r\n                                    <h5>\r\n                                        <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\r\n                                                style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\r\n                                            (optional)</Button>\r\n\r\n                                    </h5>\r\n\r\n                                </CardHeader> */}\r\n\r\n\r\n                <CardBody>\r\n                  <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\r\n                                   changeHandler={this.handleInputChange}\r\n                                   errorsMap={this.state.formErrors}\r\n                                   isValidMap={this.state.isValid}\r\n                                   currentValues={this.state.formValues} config={providers}/>\r\n\r\n                  <div className=\"clearfix\">\r\n                    <div className=\"float-right\">\r\n                      <Input type=\"checkbox\" value={advancedOptions}\r\n                             onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\r\n                      <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\r\n                        back</Button>\r\n\r\n                      <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\r\n                    </div>\r\n                  </div>\r\n                </CardBody>\r\n\r\n\r\n              </Card>\r\n            </Collapse>\r\n            {/* <div className=\"clearfix\" ref={(el) => {\r\n                            this.configEndDiv = el\r\n                        }}>\r\n                            <div className=\"float-right mb-3\">\r\n                                <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\r\n                                <Button color=\"success\" type=\"submit\">Create Config</Button>\r\n\r\n                            </div>\r\n                        </div> */}\r\n            <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\r\n          </ErrorBoundary>\r\n        </div>);\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  /**\r\n   * The list of all providers.\r\n   */\r\n  providers: state.config.providers\r\n});\r\n\r\nNewDrive.propTypes = {\r\n  providers: PropTypes.array.isRequired,\r\n  getProviders: PropTypes.func.isRequired,\r\n  isEdit: PropTypes.bool.isRequired,\r\n  driveName: PropTypes.string\r\n};\r\n\r\nNewDrive.defaultProps = {\r\n  isEdit: false,\r\n};\r\n\r\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\r\n"],"sourceRoot":""}