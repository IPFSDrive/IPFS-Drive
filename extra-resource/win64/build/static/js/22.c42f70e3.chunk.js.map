{"version":3,"sources":["actions/configActions.js","views/RemoteManagement/ShowConfig/ConfigRow.js","views/RemoteManagement/ShowConfig/ShowConfig.js"],"names":["getProviders","dispatch","getAllProviders","then","data","type","GET_PROVIDERS","payload","providers","getConfigDump","getAllConfigDump","res","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","ConfigRow","props","context","onUpdateClicked","name","state","remote","history","push","remoteName","onDeleteClicked","bind","this","refreshHandle","window","confirm","axiosInstance","post","urls","deleteConfig","toast","info","err","sequenceNumber","data-test","scope","Button","className","onClick","React","Component","withRouter","RemoteRows","remotes","returnMap","curKey","Object","entries","key","value","ShowConfig","sss","split","map","it","index","style","toString","replace","Row","Col","lg","color","Table","responsive","PureComponent","connect","config","configDump","hasError"],"mappings":"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","file":"static/js/22.c42f70e3.chunk.js","sourcesContent":["import {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\r\nimport {getAllConfigDump, getAllProviders} from \"rclone-api\";\r\n\r\n/**\r\n * Gets all Providers from the rclone UI Backend\r\n * @returns {Function}\r\n */\r\nexport const getProviders = () => dispatch => {\r\n    getAllProviders().then(data => dispatch({\r\n        type: GET_PROVIDERS,\r\n        payload: data.providers\r\n    }))\r\n};\r\n/**\r\n * Gets dump of configured remotes from the rclone backend\r\n * @returns {Function}\r\n */\r\nexport const getConfigDump = () => dispatch => {\r\n    getAllConfigDump().then(res => dispatch({\r\n        type: GET_CONFIG_DUMP,\r\n        status: REQUEST_SUCCESS,\r\n        payload: res\r\n    }), error => dispatch({\r\n        type: GET_CONFIG_DUMP,\r\n        status: REQUEST_ERROR,\r\n        payload: error\r\n    }))\r\n};\r\n","import React from \"react\";\r\nimport axiosInstance from \"../../../utils/API/API\";\r\nimport {Button} from \"reactstrap\";\r\nimport * as  PropTypes from \"prop-types\";\r\nimport {toast} from \"react-toastify\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport urls from \"../../../utils/API/endpoint\";\r\n\r\n\r\nclass ConfigRow extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        let {remote, remoteName} = this.props;\r\n        remote[\"name\"] = remoteName;\r\n        this.state = {\r\n            remote: remote\r\n        };\r\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\r\n        this.onUpdateClicked = this.onUpdateClicked.bind(this);\r\n\r\n    }\r\n\r\n\r\n    onUpdateClicked = () => {\r\n        const {name} = this.state.remote;\r\n        this.props.history.push(\"/newdrive/edit/\" + name);\r\n    };\r\n\r\n    // TODO: Delete config functionality\r\n    onDeleteClicked() {\r\n        const {name} = this.state.remote;\r\n        let {refreshHandle} = this.props;\r\n\r\n        // Delete http request\r\n        if (window.confirm(`Are you sure you wish to delete ${name}? You cannot restore it once it is deleted.`)) {\r\n\r\n            axiosInstance.post(urls.deleteConfig, {name: name}).then(\r\n                (res) => {\r\n                    // console.log(res);\r\n                    // Refresh the parent component\r\n                    refreshHandle();\r\n                    toast.info('Config deleted');\r\n                }, (err) => {\r\n                    // console.log(`Error occurred: ${err}`);\r\n                    toast.error('Error deleting config')\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {name, type} = this.state.remote;\r\n        const {sequenceNumber} = this.props;\r\n        return (\r\n            <tr data-test=\"configRowComponent\">\r\n                <th scope=\"row\">{sequenceNumber}</th>\r\n                <td>{name}</td>\r\n                <td>{type}</td>\r\n                <td>\r\n\r\n                    <Button className={\"bg-info mr-2\"} onClick={this.onUpdateClicked}>Update</Button>\r\n                    <Button className={\"bg-danger\"} onClick={this.onDeleteClicked}>Delete</Button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nconst propTypes = {\r\n    remote: PropTypes.object.isRequired, // Name of the remote to perform operations\r\n    refreshHandle: PropTypes.func.isRequired, // Used to refresh the parent component upon change\r\n    sequenceNumber: PropTypes.number.isRequired,\r\n    remoteName: PropTypes.string.isRequired,\r\n\r\n};\r\n\r\nConfigRow.propTypes = propTypes;\r\n\r\nexport default withRouter(ConfigRow);","import React from \"react\";\r\nimport {Button, Col, Row, Table} from \"reactstrap\";\r\nimport ConfigRow from \"./ConfigRow\";\r\nimport {connect} from \"react-redux\";\r\nimport {getConfigDump} from \"../../../actions/configActions\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport {renderedDive} from \"enzyme/src/Utils\";\r\n\r\n\r\nfunction RemoteRows({remotes, refreshHandle}) {\r\n\r\n  let returnMap = [];\r\n  let curKey = 1;\r\n  for (const [key, value] of Object.entries(remotes)) {\r\n    returnMap.push((<ConfigRow sequenceNumber={curKey} key={key} remoteName={key} remote={value}\r\n                               refreshHandle={refreshHandle}/>));\r\n    curKey++;\r\n  }\r\n  return returnMap;\r\n}\r\n\r\n\r\nclass ShowConfig extends React.PureComponent {\r\n\r\n  componentDidMount() {\r\n    //Get the configs\r\n    this.props.getConfigDump();\r\n  }\r\n\r\n  render() {\r\n    // 图标测试\r\n    let s = '.icon-user, .icon-people, .icon-user-female, .icon-user-follow, .icon-user-following, .icon-user-unfollow, .icon-login, .icon-logout, .icon-emotsmile, .icon-phone, .icon-call-end, .icon-call-in, .icon-call-out, .icon-map, .icon-location-pin, .icon-direction, .icon-directions, .icon-compass, .icon-layers, .icon-menu, .icon-list, .icon-options-vertical, .icon-options, .icon-arrow-down, .icon-arrow-left, .icon-arrow-right, .icon-arrow-up, .icon-arrow-up-circle, .icon-arrow-left-circle, .icon-arrow-right-circle, .icon-arrow-down-circle, .icon-check, .icon-clock, .icon-plus, .icon-minus, .icon-close, .icon-event, .icon-exclamation, .icon-organization, .icon-trophy, .icon-screen-smartphone, .icon-screen-desktop, .icon-plane, .icon-notebook, .icon-mustache, .icon-mouse, .icon-magnet, .icon-energy, .icon-disc, .icon-cursor, .icon-cursor-move, .icon-crop, .icon-chemistry, .icon-speedometer, .icon-shield, .icon-screen-tablet, .icon-magic-wand, .icon-hourglass, .icon-graduation, .icon-ghost, .icon-game-controller, .icon-fire, .icon-eyeglass, .icon-envelope-open, .icon-envelope-letter, .icon-bell, .icon-badge, .icon-anchor, .icon-wallet, .icon-vector, .icon-speech, .icon-puzzle, .icon-printer, .icon-present, .icon-playlist, .icon-pin, .icon-picture, .icon-handbag, .icon-globe-alt, .icon-globe, .icon-folder-alt, .icon-folder, .icon-film, .icon-feed, .icon-drop, .icon-drawer, .icon-docs, .icon-doc, .icon-diamond, .icon-cup, .icon-calculator, .icon-bubbles, .icon-briefcase, .icon-book-open, .icon-basket-loaded, .icon-basket, .icon-bag, .icon-action-undo, .icon-action-redo, .icon-wrench, .icon-umbrella, .icon-trash, .icon-tag, .icon-support, .icon-frame, .icon-size-fullscreen, .icon-size-actual, .icon-shuffle, .icon-share-alt, .icon-share, .icon-rocket, .icon-question, .icon-pie-chart, .icon-pencil, .icon-note, .icon-loop, .icon-home, .icon-grid, .icon-graph, .icon-microphone, .icon-music-tone-alt, .icon-music-tone, .icon-earphones-alt, .icon-earphones, .icon-equalizer, .icon-like, .icon-dislike, .icon-control-start, .icon-control-rewind, .icon-control-play, .icon-control-pause, .icon-control-forward, .icon-control-end, .icon-volume-1, .icon-volume-2, .icon-volume-off, .icon-calendar, .icon-bulb, .icon-chart, .icon-ban, .icon-bubble, .icon-camrecorder, .icon-camera, .icon-cloud-download, .icon-cloud-upload, .icon-envelope, .icon-eye, .icon-flag, .icon-heart, .icon-info, .icon-key, .icon-link, .icon-lock, .icon-lock-open, .icon-magnifier, .icon-magnifier-add, .icon-magnifier-remove, .icon-paper-clip, .icon-paper-plane, .icon-power, .icon-refresh, .icon-reload, .icon-settings, .icon-star, .icon-symbol-female, .icon-symbol-male, .icon-target, .icon-credit-card, .icon-paypal, .icon-social-tumblr, .icon-social-twitter, .icon-social-facebook, .icon-social-instagram, .icon-social-linkedin, .icon-social-pinterest, .icon-social-github, .icon-social-google, .icon-social-reddit, .icon-social-skype, .icon-social-dribbble, .icon-social-behance, .icon-social-foursqare, .icon-social-soundcloud, .icon-social-spotify, .icon-social-stumbleupon, .icon-social-youtube, .icon-social-dropbox, .icon-social-vkontakte, .icon-social-steam';\r\n    s = '';\r\n    let ss = s.split(',')\r\n    let sss = ss.map((it, index) => {\r\n      return <span style={{'margin-left':'20px'}}><i className={['nav-icon ' + it.toString().replace('.', '')]} key={index} style={{'font-size':'20px'}}></i> {it}</span>\r\n    })\r\n\r\n    return (\r\n      <div data-test=\"showConfigComponent\">\r\n        <Row>\r\n          <Col lg={8} className={\"mb-4\"}>\r\n            <Button color={\"primary\"} className={\"float-left\"}\r\n              onClick={() => this.props.history.push(\"/simplenewdrive\")}>\r\n              Create a New Config\r\n            </Button>\r\n          </Col>\r\n          <Col lg={4}>\r\n\r\n          </Col>\r\n\r\n        </Row>\r\n        {sss}\r\n        <Table responsive className=\"table-striped\">\r\n          <thead>\r\n          <tr>\r\n            <th>No.</th>\r\n            <th>Name</th>\r\n            <th>Type</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          <RemoteRows remotes={this.props.remotes} refreshHandle={this.props.getConfigDump}/>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  remotes: state.config.configDump,\r\n  hasError: state.config.hasError,\r\n  error: state.config.error\r\n\r\n});\r\n\r\nShowConfig.propTypes = {\r\n  remotes: PropTypes.object.isRequired,\r\n  hasError: PropTypes.bool,\r\n  error: PropTypes.object\r\n};\r\n\r\nexport default connect(mapStateToProps, {getConfigDump})(ShowConfig);\r\n"],"sourceRoot":""}